// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: protos/tickets.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketService_TicketServiceCreateListener_FullMethodName = "/TicketService/TicketServiceCreateListener"
	TicketService_TicketServiceFetchListeners_FullMethodName = "/TicketService/TicketServiceFetchListeners"
	TicketService_TicketServiceCreateMessage_FullMethodName  = "/TicketService/TicketServiceCreateMessage"
	TicketService_TicketServiceFetchMessages_FullMethodName  = "/TicketService/TicketServiceFetchMessages"
)

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	TicketServiceCreateListener(ctx context.Context, in *TicketChannelInfo, opts ...grpc.CallOption) (*CreateListenerResponse, error)
	TicketServiceFetchListeners(ctx context.Context, in *TicketClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketChannelInfo], error)
	TicketServiceCreateMessage(ctx context.Context, in *TicketMessageInfo, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	TicketServiceFetchMessages(ctx context.Context, in *TicketChannelInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketMessageInfo], error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) TicketServiceCreateListener(ctx context.Context, in *TicketChannelInfo, opts ...grpc.CallOption) (*CreateListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateListenerResponse)
	err := c.cc.Invoke(ctx, TicketService_TicketServiceCreateListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) TicketServiceFetchListeners(ctx context.Context, in *TicketClientInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketChannelInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[0], TicketService_TicketServiceFetchListeners_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TicketClientInfo, TicketChannelInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicketService_TicketServiceFetchListenersClient = grpc.ServerStreamingClient[TicketChannelInfo]

func (c *ticketServiceClient) TicketServiceCreateMessage(ctx context.Context, in *TicketMessageInfo, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, TicketService_TicketServiceCreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) TicketServiceFetchMessages(ctx context.Context, in *TicketChannelInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketMessageInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[1], TicketService_TicketServiceFetchMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TicketChannelInfo, TicketMessageInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicketService_TicketServiceFetchMessagesClient = grpc.ServerStreamingClient[TicketMessageInfo]

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility.
type TicketServiceServer interface {
	TicketServiceCreateListener(context.Context, *TicketChannelInfo) (*CreateListenerResponse, error)
	TicketServiceFetchListeners(*TicketClientInfo, grpc.ServerStreamingServer[TicketChannelInfo]) error
	TicketServiceCreateMessage(context.Context, *TicketMessageInfo) (*CreateMessageResponse, error)
	TicketServiceFetchMessages(*TicketChannelInfo, grpc.ServerStreamingServer[TicketMessageInfo]) error
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketServiceServer struct{}

func (UnimplementedTicketServiceServer) TicketServiceCreateListener(context.Context, *TicketChannelInfo) (*CreateListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketServiceCreateListener not implemented")
}
func (UnimplementedTicketServiceServer) TicketServiceFetchListeners(*TicketClientInfo, grpc.ServerStreamingServer[TicketChannelInfo]) error {
	return status.Errorf(codes.Unimplemented, "method TicketServiceFetchListeners not implemented")
}
func (UnimplementedTicketServiceServer) TicketServiceCreateMessage(context.Context, *TicketMessageInfo) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketServiceCreateMessage not implemented")
}
func (UnimplementedTicketServiceServer) TicketServiceFetchMessages(*TicketChannelInfo, grpc.ServerStreamingServer[TicketMessageInfo]) error {
	return status.Errorf(codes.Unimplemented, "method TicketServiceFetchMessages not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}
func (UnimplementedTicketServiceServer) testEmbeddedByValue()                       {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_TicketServiceCreateListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketChannelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).TicketServiceCreateListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_TicketServiceCreateListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).TicketServiceCreateListener(ctx, req.(*TicketChannelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_TicketServiceFetchListeners_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).TicketServiceFetchListeners(m, &grpc.GenericServerStream[TicketClientInfo, TicketChannelInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicketService_TicketServiceFetchListenersServer = grpc.ServerStreamingServer[TicketChannelInfo]

func _TicketService_TicketServiceCreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketMessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).TicketServiceCreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_TicketServiceCreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).TicketServiceCreateMessage(ctx, req.(*TicketMessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_TicketServiceFetchMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketChannelInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).TicketServiceFetchMessages(m, &grpc.GenericServerStream[TicketChannelInfo, TicketMessageInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TicketService_TicketServiceFetchMessagesServer = grpc.ServerStreamingServer[TicketMessageInfo]

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TicketServiceCreateListener",
			Handler:    _TicketService_TicketServiceCreateListener_Handler,
		},
		{
			MethodName: "TicketServiceCreateMessage",
			Handler:    _TicketService_TicketServiceCreateMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TicketServiceFetchListeners",
			Handler:       _TicketService_TicketServiceFetchListeners_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TicketServiceFetchMessages",
			Handler:       _TicketService_TicketServiceFetchMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/tickets.proto",
}
